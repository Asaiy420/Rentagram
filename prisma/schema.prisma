// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
//User Schema
model User{
  id String @id @default(cuid())
  email String @unique
  username String @unique
  clerkId String @unique
  name String?
  bio String?
  image String?
  location String?
  website String?
  createdAt DateTime @default(now()) //* Member since (year)
  updatedAt DateTime @updatedAt
//* Relations: One to many
  posts Post[]
  comments Comment[]
  likes Like[]

  follower Follows[] @relation("follower") //? Users that follow this user
  following Follows[] @relation("following") //? Users that this user follows

  notifications Notification[] @relation("userNotifications") //? Notifications recieved by the user
  notificationsCreate Notification[] @relation("notificationCreator") //? Notifications created by the user
}

model Post{
  id String @id @default (cuid())
  authorId String
  content String?
  image String?
  createdAt DateTime @default (now())
  updatedAt DateTime @updatedAt

//* Relations
  author User @relation(fields: [authorId], references: [id], onDelete: Cascade)  //* Delete posts if user is deleted
  comments Comment[]
  likes Like[]
  notifications Notification[]
}

model Comment{
  id String @id @default (cuid())
  content String
  authorId String
  postId String
  createdAt DateTime @default (now())
  
  //* Relations

  author User @relation(fields: [authorId], references: [id], onDelete: Cascade) //* Delete comments if user is deleted
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade) //* Delete comments if post is deleted
  notifications Notification[]

  @@index([authorId, postId]) //* Composite index for faster queries
}

model Like{
  id String @id @default(cuid())
  postId String
  userId String
  createdAt DateTime @default(now())

//* Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade) //* Delete likes if user is deleted
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade) //* Delete likes if post is deleted

  @@index([userId, postId]) //* Composite index for faster queries
  @@unique([userId, postId]) //* Prevents users from liking the same post multiple times
}

model Follows{
  followerId String
  followingId String
  createdAt DateTime @default(now())

//* Relations
  follower User @relation("follower", fields: [followerId], references: [id], onDelete: Cascade) //* Delete follows if user is deleted
  following User @relation("following", fields: [followingId], references: [id], onDelete: Cascade) //* Delete follows if user is deleted
  
  @@index([followerId, followingId]) //* Composite index for faster queries
  @@id([followerId, followingId]) //* A composite primary key that prevnts users from folowing the same user multiple times
  
}
model Notification{
  id String @id @default(cuid())
  userId String
  creatorId String
  read Boolean @default(false)
  type NotificationType
  postId String?
  commentId String?
  createdAt DateTime @default(now())

//* Relations
  user User @relation("userNotifications", fields: [userId], references: [id], onDelete: Cascade) //* Delete notifications if user is deleted
  creator User @relation("notificationCreator", fields: [creatorId], references: [id], onDelete: Cascade) //* Delete notifications if creator is deleted
  post Post? @relation(fields: [postId], references: [id], onDelete: Cascade) //* Delete notifications if post is deleted 
  comment Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade) //* Delete notifications if comment is deleted

  @@index([userId, createdAt]) //* Composite index for faster queries
}

enum NotificationType {
  LIKE
  COMMENT
  FOLLOW
}





